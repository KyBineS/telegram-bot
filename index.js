const { Telegraf, Scenes, session, Markup } = require('telegraf');
const { Stage, WizardScene } = Scenes;
const express = require('express');
const { Pool } = require('pg');
const axios = require('axios');
const moment = require('moment-timezone');
require('dotenv').config();
const fs = require('fs');
const path = require('path');

moment.tz.setDefault('Europe/Moscow'); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è

// –§—É–Ω–∫—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π
function logAction(action, userId, details = '') {
    const logMessage = `[${new Date().toISOString()}] ${action} | User: ${userId} | ${details}\n`;
    fs.appendFileSync(path.join(__dirname, 'actions.log'), logMessage);
    console.log(logMessage);
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
const app = express();
const bot = new Telegraf(process.env.BOT_TOKEN);

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL
const pool = new Pool({
    connectionString: process.env.DATABASE_URL,
    ssl: { rejectUnauthorized: false }
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
async function initDB() {
    try {
        await pool.query(`
            CREATE TABLE IF NOT EXISTS users (
                id SERIAL PRIMARY KEY,
                user_id BIGINT UNIQUE,
                created_at TIMESTAMP DEFAULT NOW()
            );
            
            CREATE TABLE IF NOT EXISTS scheduled_messages (
                id SERIAL PRIMARY KEY,
                message_text TEXT,
                link TEXT,
                event_time TEXT,
                notification_time TIMESTAMP WITH TIME ZONE,
                created_at TIMESTAMP DEFAULT NOW()
            );
        `);
        console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞');
    } catch (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', err);
    }
}

// –°—Ü–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏
const broadcastScene = new WizardScene(
    'broadcast',
    async (ctx) => {
        await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: 15:00 25.12.2024):');
        return ctx.wizard.next();
    },

    async (ctx) => {
        ctx.wizard.state.time = ctx.message.text;
        await ctx.reply('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:');
        return ctx.wizard.next();
    },

    async (ctx) => {
        ctx.wizard.state.message = ctx.message.text;
        await ctx.reply('–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ Google Meet:');
        return ctx.wizard.next();
    },

    async (ctx) => {
        ctx.wizard.state.link = ctx.message.text;

        await ctx.replyWithHTML(`
            <b>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Ä–∞—Å—Å—ã–ª–∫—É:</b>\n
            üïí –í—Ä–µ–º—è: <code>${ctx.wizard.state.time}</code>\n
            üì¢ –¢–µ–∫—Å—Ç: ${ctx.wizard.state.message}\n
            üîó –°—Å—ã–ª–∫–∞: ${ctx.wizard.state.link}
        `, {
            reply_markup: {
                inline_keyboard: [
                    [
                        { text: '‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å', callback_data: 'confirm_send' },
                        { text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', callback_data: 'cancel_send' }
                    ]
                ]
            }
        });
        return ctx.wizard.next();
    },

    async (ctx) => {
        if (ctx.callbackQuery?.data === 'confirm_send') {
            try {
                // –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è —Å–æ–±—ã—Ç–∏—è
                const eventTime = moment.tz(
                    ctx.wizard.state.time,
                    'HH:mm DD.MM.YYYY',
                    'Europe/Moscow'
                );

                if (!eventTime.isValid()) {
                    await ctx.editMessageText('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏!');
                    return ctx.scene.leave();
                }

                // –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–∑–∞ 30 –º–∏–Ω—É—Ç)
                const notificationTime = eventTime.clone().subtract(30, 'minutes');

                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                await pool.query(
                    `INSERT INTO scheduled_messages 
                    (message_text, link, event_time, notification_time) 
                    VALUES ($1, $2, $3, $4)`,
                    [
                        ctx.wizard.state.message,
                        ctx.wizard.state.link,
                        eventTime.format(),
                        notificationTime.format()
                    ]
                );

                await ctx.editMessageText('‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞!');
            } catch (err) {
                console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', err);
                await ctx.editMessageText('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏');
            }
        } else {
            await ctx.editMessageText('‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞');
        }
        return ctx.scene.leave();
    }
);

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ü–µ–Ω
const stage = new Stage([broadcastScene]);
bot.use(session());
bot.use(stage.middleware());

// –ö–æ–º–∞–Ω–¥–∞ /start
bot.start(async (ctx) => {
    try {
        await pool.query(
            'INSERT INTO users (user_id) VALUES ($1) ON CONFLICT (user_id) DO NOTHING',
            [ctx.from.id]
        );
        logAction('NEW_USER', ctx.from.id);

        await ctx.reply('üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!', Markup.inlineKeyboard([
            [
                Markup.button.callback('‚úÖ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è', 'subscribe'),
                Markup.button.callback('‚ùå –û—Ç–ø–∏—Å–∞—Ç—å—Å—è', 'unsubscribe_btn')
            ]
        ]));
    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', err);
    }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
bot.action('subscribe', async (ctx) => {
    try {
        await pool.query(
            'INSERT INTO users (user_id) VALUES ($1) ON CONFLICT (user_id) DO NOTHING',
            [ctx.from.id]
        );
        await ctx.editMessageText('‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É');
    } catch (err) {
        await ctx.editMessageText('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏');
    }
});

bot.action('unsubscribe_btn', async (ctx) => {
    await pool.query('DELETE FROM users WHERE user_id = $1', [ctx.from.id]);
    await ctx.editMessageText('‚ùå –í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏');
    logAction('UNSUBSCRIBE', ctx.from.id);
});

// –ê–¥–º–∏–Ω—Å–∫–∞—è –ø–∞–Ω–µ–ª—å
bot.command('admin', async (ctx) => {
    if (ctx.from.id.toString() !== process.env.ADMIN_ID) return;

    await ctx.reply(
        '–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:',
        Markup.inlineKeyboard([
            [
                Markup.button.callback('üì§ –°–æ–∑–¥–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É', 'start_broadcast'),
                Markup.button.callback('üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', 'list_users')
            ],
            [
                Markup.button.callback('üóë –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', 'remove_user'),
                Markup.button.callback('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'stats_btn')
            ]
        ])
    );
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥
bot.action('start_broadcast', async (ctx) => {
    await ctx.answerCbQuery();
    await ctx.scene.enter('broadcast');
});

bot.action('list_users', async (ctx) => {
    const users = await pool.query('SELECT user_id FROM users');
    const userList = users.rows.map(u => `üë§ ID: ${u.user_id}`).join('\n');
    await ctx.editMessageText(`–°–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ (${users.rowCount}):\n${userList}`);
});

bot.action('remove_user', async (ctx) => {
    await ctx.editMessageText('–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:');
    ctx.session.waitingForUserId = true;
});

bot.action('stats_btn', async (ctx) => {
    const users = await pool.query('SELECT COUNT(*) FROM users');
    const messages = await pool.query('SELECT COUNT(*) FROM scheduled_messages');
    await ctx.editMessageText(`
        üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
        üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${users.rows[0].count}
        üì® –ê–∫—Ç–∏–≤–Ω—ã—Ö —Ä–∞—Å—Å—ã–ª–æ–∫: ${messages.rows[0].count}
    `);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥
bot.on('text', async (ctx) => {
    if (ctx.session.waitingForUserId && ctx.from.id.toString() === process.env.ADMIN_ID) {
        const userId = ctx.message.text;
        try {
            await pool.query('DELETE FROM users WHERE user_id = $1', [userId]);
            await ctx.reply(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} —É–¥–∞–ª—ë–Ω`);
            logAction('USER_REMOVED', ctx.from.id, `Target: ${userId}`);
        } catch (err) {
            await ctx.reply('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è');
        }
        ctx.session.waitingForUserId = false;
    }
});

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞
async function sendMessages() {
    try {
        const now = moment().tz('Europe/Moscow');
        const messages = await pool.query(
            'SELECT * FROM scheduled_messages WHERE notification_time <= $1',
            [now.format()]
        );

        for (const msg of messages.rows) {
            const users = await pool.query('SELECT user_id FROM users');

            for (const user of users.rows) {
                try {
                    await bot.telegram.sendMessage(
                        user.user_id,
                        `‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ! –ß–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç:\n${msg.message_text}\nüîó ${msg.link}`
                    );
                } catch (err) {
                    if (err.code === 403) {
                        await pool.query('DELETE FROM users WHERE user_id = $1', [user.user_id]);
                    }
                }
            }

            await pool.query('DELETE FROM scheduled_messages WHERE id = $1', [msg.id]);
        }
    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏:', err);
    }
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
(async () => {
    await initDB();

    app.use(bot.webhookCallback('/'));
    bot.telegram.setWebhook(`${process.env.RENDER_URL}/`);

    const PORT = process.env.PORT || 3000;
    app.listen(PORT, () => {
        console.log(`üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
        setInterval(sendMessages, 60000); // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É

        setInterval(() => {
            if (process.env.RENDER_URL) {
                axios.get(process.env.RENDER_URL).catch(() => {});
            }
        }, 300000); // –ü–∏–Ω–≥ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
    });
})();